diff --git a/node_modules/@coinbase/cdp-sdk/_cjs/auth/utils/jwt.js b/node_modules/@coinbase/cdp-sdk/_cjs/auth/utils/jwt.js
index fb240df..29522c0 100644
--- a/node_modules/@coinbase/cdp-sdk/_cjs/auth/utils/jwt.js
+++ b/node_modules/@coinbase/cdp-sdk/_cjs/auth/utils/jwt.js
@@ -37,8 +37,8 @@ exports.generateJwt = generateJwt;
 exports.generateWalletJwt = generateWalletJwt;
 const crypto = __importStar(require("crypto"));
 const crypto_1 = require("crypto");
-const jose_1 = require("jose");
 const errors_js_1 = require("../errors.js");
+
 /**
  * Generates a JWT (also known as a Bearer token) for authenticating with Coinbase's REST APIs.
  * Supports both EC (ES256) and Ed25519 (EdDSA) keys. Also supports JWTs meant for
@@ -50,7 +50,7 @@ const errors_js_1 = require("../errors.js");
  * @throws {Error} If required parameters are missing, invalid, or if JWT signing fails
  */
 async function generateJwt(options) {
-    // Validate required parameters
+    const jose_1 = await import("jose");
     if (!options.apiKeyId) {
         throw new Error("Key name is required");
     }
@@ -82,15 +82,16 @@ async function generateJwt(options) {
     const randomNonce = nonce();
     // Determine if we're using EC or Edwards key based on the key format
     if (isValidECKey(options.apiKeySecret)) {
-        return await buildECJWT(options.apiKeySecret, options.apiKeyId, claims, now, expiresIn, randomNonce);
+        return await buildECJWT(jose_1, options.apiKeySecret, options.apiKeyId, claims, now, expiresIn, randomNonce);
     }
     else if (isValidEd25519Key(options.apiKeySecret)) {
-        return await buildEdwardsJWT(options.apiKeySecret, options.apiKeyId, claims, now, expiresIn, randomNonce);
+        return await buildEdwardsJWT(jose_1, options.apiKeySecret, options.apiKeyId, claims, now, expiresIn, randomNonce);
     }
     else {
         throw new Error("Invalid key format - must be either PEM EC key or base64 Ed25519 key");
     }
 }
+
 /**
  * Generates a wallet authentication JWT for the given API endpoint URL.
  * Used for authenticating with specific endpoints that require wallet authentication.
@@ -101,6 +102,7 @@ async function generateJwt(options) {
  * @throws {InvalidWalletSecretFormatError} If the private key is not in the correct format or signing fails.
  */
 async function generateWalletJwt(options) {
+    const jose_1 = await import("jose");
     if (!options.walletSecret) {
         throw new errors_js_1.UndefinedWalletSecretError("Wallet Secret is not defined");
     }
@@ -130,6 +132,7 @@ async function generateWalletJwt(options) {
         throw new errors_js_1.InvalidWalletSecretFormatError("Could not create the EC key: " + error);
     }
 }
+
 /**
  * Determines if a string could be a valid Ed25519 key
  *
@@ -145,6 +148,7 @@ function isValidEd25519Key(str) {
         return false;
     }
 }
+
 /**
  * Determines if a string is a valid EC private key in PEM format
  *
@@ -162,9 +166,11 @@ function isValidECKey(str) {
         return false;
     }
 }
+
 /**
  * Builds a JWT using an EC key.
  *
+ * @param jose_1 - The imported jose module
  * @param privateKey - The EC private key in PEM format
  * @param keyName - The key name/ID
  * @param claims - The JWT claims
@@ -174,7 +180,7 @@ function isValidECKey(str) {
  * @returns A JWT token signed with an EC key
  * @throws {Error} If key conversion, import, or signing fails
  */
-async function buildECJWT(privateKey, keyName, claims, now, expiresIn, nonce) {
+async function buildECJWT(jose_1, privateKey, keyName, claims, now, expiresIn, nonce) {
     try {
         // Convert to PKCS8 format
         const keyObj = (0, crypto_1.createPrivateKey)(privateKey);
@@ -193,9 +199,11 @@ async function buildECJWT(privateKey, keyName, claims, now, expiresIn, nonce) {
         throw new Error(`Failed to generate EC JWT: ${error.message}`);
     }
 }
+
 /**
  * Builds a JWT using an Ed25519 key.
  *
+ * @param jose_1 - The imported jose module
  * @param privateKey - The Ed25519 private key in base64 format
  * @param keyName - The key name/ID
  * @param claims - The JWT claims
@@ -205,7 +213,7 @@ async function buildECJWT(privateKey, keyName, claims, now, expiresIn, nonce) {
  * @returns A JWT token using an Ed25519 key
  * @throws {Error} If key parsing, import, or signing fails
  */
-async function buildEdwardsJWT(privateKey, keyName, claims, now, expiresIn, nonce) {
+async function buildEdwardsJWT(jose_1, privateKey, keyName, claims, now, expiresIn, nonce) {
     try {
         // Decode the base64 key (expecting 64 bytes: 32 for seed + 32 for public key)
         const decoded = Buffer.from(privateKey, "base64");
@@ -235,6 +243,7 @@ async function buildEdwardsJWT(privateKey, keyName, claims, now, expiresIn, nonc
         throw new Error(`Failed to generate Ed25519 JWT: ${error.message}`);
     }
 }
+
 /**
  * Generates a random nonce for the JWT.
  *
